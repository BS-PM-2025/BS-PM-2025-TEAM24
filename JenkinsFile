pipeline {
  /* Run the pipeline on any available agent */
  agent any

  environment {
    /* Make sure Jest/Mocha/etc. runs in CI mode */
    CI = 'true'
  }

  stages {
    /* 1) Clone the repo, forcing 'main' as the branch */
    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[ name: '*/main' ]],                  // ‚Üê point here to your real default branch
          userRemoteConfigs: [[
            url: 'https://github.com/YourOrg/YourRepo.git' // ‚Üê update to your actual GitHub URL
          ]]
        ])
      }
    }

    /* 2) Install npm dependencies */
    stage('Install Dependencies') {
      agent {
        docker {
          image 'node:18-alpine'
          args  '-u root:root'    // npm needs write permission
        }
      }
      steps {
        sh 'npm ci'
      }
    }

    /* 3) Run unit tests and publish JUnit report */
    stage('Run Unit Tests') {
      agent {
        docker {
          image 'node:18-alpine'
          args  '-u root:root'
        }
      }
      steps {
        // adjust this to whatever your test runner is
        sh 'npm test -- --ci --reporters=jest-junit --outputFile=test-reports/results.xml'
      }
      post {
        always {
          junit 'test-reports/results.xml'
        }
      }
    }

    /* 4) Smoke-test your app by starting it briefly */
    stage('Smoke Test App Startup') {
      agent {
        docker {
          image 'node:18-alpine'
          args  '-u root:root'
        }
      }
      steps {
        sh '''
          npm start & 
          APP_PID=$!
          sleep 10
          kill $APP_PID || true
        '''
        echo '‚úÖ App started successfully (smoke-test)'
      }
    }
  }

  post {
    failure {
      echo "üö® Build failed or tests failed ‚Äì check the console output."
    }
  }
}
