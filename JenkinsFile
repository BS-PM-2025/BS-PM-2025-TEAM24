pipeline {
  agent none

  stages {
    // 1) Let Jenkins clone your code
    stage('Checkout') {
      agent any
      steps {
        // uses the Multibranch Pipelineâ€™s SCM settings
        checkout scm
      }
    }

    // 2) Install dependencies
    stage('Install Dependencies') {
      agent {
        docker {
          image 'node:18-alpine'
          args  '-u root:root'       // run as root so npm can write
        }
      }
      steps {
        sh 'npm ci'     // clean install
      }
    }

    // 3) Run your unit tests
    stage('Run Unit Tests') {
      agent {
        docker {
          image 'node:18-alpine'
          args  '-u root:root'
        }
      }
      environment {
        CI = 'true'
      }
      steps {
        // adapt to whatever test command you have
        sh 'npm test -- --ci --reporters=jest-junit --outputFile=test-reports/results.xml'
      }
      post {
        always {
          // publish JUnit XML
          junit 'test-reports/results.xml'
        }
      }
    }

    // 4) (Optional) Boot your app briefly to smoke-test it
    stage('Smoke Test App Startup') {
      agent {
        docker {
          image 'node:18-alpine'
          args  '-u root:root'
        }
      }
      steps {
        // Spawn your app in the background, wait a few seconds, then kill
        sh '''
          npm start & 
          APP_PID=$!
          sleep 10
          kill $APP_PID || true
        '''
        echo 'âœ… App started successfully (smoke-test)'
      }
    }
  }

  post {
    failure {
      echo "ðŸš¨ Build or tests failed. Check the console output for details."
    }
  }
}
